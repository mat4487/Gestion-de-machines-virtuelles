Premier tuto : Cluster_experiment


I.Cluster setup 

1. Check proxy configuration 

a. Vérifier les variables d'environement
$ echo http_proxy=$http_proxy ; echo https_proxy=$https_proxy
http_proxy=
https_proxy=

C'est bon, les variable d'environement ne sont pas définie.

b. Définir les variables

$ export http_proxy="http://proxy:3128" ; export https_proxy="http://proxy:3128"
$ echo http_proxy=$http_proxy ; echo https_proxy=$https_proxy
http_proxy=http://proxy:3128
https_proxy=http://proxy:3128

2. Data installation 

a. Récupération et décompression de la tarball

$ wget --no-check-certificate https://gforge.inria.fr/frs/download.php/26756/hello.tgz -O ~/hello.tgz
$ tar -xvzf ~/hello.tgz -C ~/ 
hello/
hello/helloworld
hello/run_hello_mpi
hello/hello_mpi.c
hello/hello_mpi

III. Visualize cluster

1. Scheduled or running jobs

a. oarstat is a command-line tool to view current or planned job submission.

View each submissions: 

abocca@fnancy:~$ oarstat
Job id     Name           User           Submission Date     S Queue
---------- -------------- -------------- ------------------- - ----------
351651                    jmontanier     2012-01-26 14:18:20 R default   
351702                    mquinson       2012-01-27 09:53:25 R default   
351707                    tbuchert       2012-01-27 10:12:43 R default   
351709                    lsarzyniec     2012-01-27 10:17:35 R default   
351711                    asangroya      2012-01-27 10:24:57 R default   
351730                    mairaj         2012-01-27 11:08:23 R default   
351735                    sgenaud        2012-01-27 11:22:04 R default   
351464                    malexand       2012-01-24 08:34:10 W default   
351632                    gbrand         2012-01-26 09:40:15 W default   
351633                    gbrand         2012-01-26 09:40:18 W default   
351733                    awaksberg      2012-01-27 11:19:25 W default   
351734                    selharsal      2012-01-27 11:21:35 W default 

------------------------------------------------------------------------------------------------------------------
$ oarstat -f liste avec détail chaque réservations
------------------------------------------------------------------------------------------------------------------
 oarstat -f -j OAR_JOB_ID    liste le détail d'une réservation avec un job id
------------------------------------------------------------------------------------------------------------------
oarstat -s -j OAR_JOB_ID    montre le status d'un job spécific
------------------------------------------------------------------------------------------------------------------
oarstat -u LOGIN        montre les réservation d'un utilisateur
------------------------------------------------------------------------------------------------------------------
oarnodes            liste les propriétés du cluster
------------------------------------------------------------------------------------------------------------------
oarprint host -P host,cpu,core -F "host: % cpu: % core: %" -C+
liste les propriété du noeud utilisé(a utilisé lors de l(utilisation d'un noeud)
------------------------------------------------------------------------------------------------------------------
oarstat -j OAR_JOB_ID -p | oarprint core -P host,cpuset,memcore -F "%[%] (%)" -f - | sort
idem mais peut ce lancer dans le fronted
------------------------------------------------------------------------------------------------------------------
oarsub -I           permet de réserver un noeud pour 1H

[ADMISSION RULE] Set default walltime to 3600.
[ADMISSION RULE] Modify resource description with type constraints
Generate a job key...
OAR_JOB_ID=351744
Interactive mode : waiting...
Starting...

Connect to OAR job 351744 via the node griffon-50.nancy.grid5000.fr

------------------------------------------------------------------------------------------------------------------
env | grep -i ^oar      liste les variables d'environement
------------------------------------------------------------------------------------------------------------------
 cat $OAR_NODE_FILE      liste le noeud utilisé
------------------------------------------------------------------------------------------------------------------

2. Execution du script hello

abocca@griffon-50:~$ ~/hello/run_hello_mpi
INFO: 8 cpu(s) will be used for this example
INFO: /usr/bin/mpirun will be used
Hello world from process (1) of (8) running on griffon-50.nancy.grid5000.fr
 (1) : I'm tired. I'm going to sleep a bit.
Hello world from process (2) of (8) running on griffon-50.nancy.grid5000.fr
 (2) : I'm tired. I'm going to sleep a bit.
Hello world from process (3) of (8) running on griffon-50.nancy.grid5000.fr
 (3) : I'm tired. I'm going to sleep a bit.
Hello world from process (4) of (8) running on griffon-50.nancy.grid5000.fr
 (4) : I'm tired. I'm going to sleep a bit.
Hello world from process (5) of (8) running on griffon-50.nancy.grid5000.fr
 (5) : I'm tired. I'm going to sleep a bit.
Hello world from process (6) of (8) running on griffon-50.nancy.grid5000.fr
 (6) : I'm tired. I'm going to sleep a bit.
Hello world from process (7) of (8) running on griffon-50.nancy.grid5000.fr
 (7) : I'm tired. I'm going to sleep a bit.
Hello world from process (8) of (8) running on griffon-50.nancy.grid5000.fr
 (8) : I'm tired. I'm going to sleep a bit.
 (2) : Mmmm... What? Ok, It was short but good :-)
 (7) : Mmmm... What? Ok, It was short but good :-)
 (1) : Mmmm... What? Ok, It was short but good :-)
 (3) : Mmmm... What? Ok, It was short but good :-)
 (5) : Mmmm... What? Ok, It was short but good :-)
 (4) : Mmmm... What? Ok, It was short but good :-)
 (8) : Mmmm... What? Ok, It was short but good :-)
 (6) : Mmmm... What? Ok, It was short but good :-)

III. Visualization 

test les processeur disponibles
------------------------------------------------------------------------------------------------------------------
Ctrl-D or exit         exit du noeud

abocca@griffon-50:~$ logout
Connection to griffon-50.nancy.grid5000.fr closed.
Disconnected from OAR job 351744

------------------------------------------------------------------------------------------------------------------
oarsub ~/hello/run_hello_mpi -O ~/hello_mpi.log
redirige la sortie dans un fichier
-------------------------------------------------------------------------------------------------------------------
oarsub -C OAR_JOB_ID        connexion a un job existant
-------------------------------------------------------------------------------------------------------------------
oarsub -I -l nodes=2        réservation de deux noeud
-------------------------------------------------------------------------------------------------------------------
oarsh OTHER_NODE_HOSTNAME   connexion a un autre noeud
-------------------------------------------------------------------------------------------------------------------
oarsh OTHER_NODE_HOSTNAME ps -C hello_mpi
permet de lancer le script sur un noeud distant
------------------------------------------------------------------------------------------------------------------
oarsub -I -t container -l nodes=4,walltime=0:45:00
réservation de 4 noeud pour 45 min
------------------------------------------------------------------------------------------------------------------
oarsub -I -t inner=containerJobID -l nodes=3,walltime=0:15:00
permet de rajuster la réservation précédente a 3 noeud pour 15min
------------------------------------------------------------------------------------------------------------------
oardel OAR_JOB_ID       supprime un job id
------------------------------------------------------------------------------------------------------------------

J'ai copié la motiée sur Julien par ce que je suis fou
